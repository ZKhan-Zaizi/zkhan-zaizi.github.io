{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Home page hi, welcome to my MkDocs site. my git profile is gitsugatensho Some of my work utm My page about UTM linux My work on linux git My progress with github My work on a music-player git repo docker Introduction to Docker My work on Mkdocs My progress using Hadolint Relevant links Home | About | License | Docs","title":"Home"},{"location":"#home-page","text":"hi, welcome to my MkDocs site. my git profile is gitsugatensho","title":"Home page"},{"location":"#some-of-my-work","text":"","title":"Some of my work"},{"location":"#utm","text":"My page about UTM","title":"utm"},{"location":"#linux","text":"My work on linux","title":"linux"},{"location":"#git","text":"My progress with github My work on a music-player git repo","title":"git"},{"location":"#docker","text":"Introduction to Docker My work on Mkdocs My progress using Hadolint","title":"docker"},{"location":"#relevant-links","text":"Home | About | License | Docs","title":"Relevant links"},{"location":"about/","text":"About page welcome! im iio owner of gitsugatensho ## Relevant links Home | About | License | Docs","title":"about"},{"location":"about/#about-page","text":"welcome! im iio owner of gitsugatensho ## Relevant links Home | About | License | Docs","title":"About page"},{"location":"license/","text":"License empty! Relevant links Home | About | License | Docs","title":"licence"},{"location":"license/#license","text":"empty!","title":"License"},{"location":"license/#relevant-links","text":"Home | About | License | Docs","title":"Relevant links"},{"location":"oldindex/","text":"Home page hi, welcome to my mkdocs site bullet point list My git profile is gitsugatensho command - explanation. Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. about.md # an about page license.md # empty license page oldindex.md # the old untouched index page utm.md # a page about utm ... # Other markdown pages, images and other files. Relevant links About | UTM | License","title":"oldindex"},{"location":"oldindex/#home-page","text":"hi, welcome to my mkdocs site","title":"Home page"},{"location":"oldindex/#bullet-point-list","text":"My git profile is gitsugatensho command - explanation.","title":"bullet point list"},{"location":"oldindex/#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. about.md # an about page license.md # empty license page oldindex.md # the old untouched index page utm.md # a page about utm ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"oldindex/#relevant-links","text":"About | UTM | License","title":"Relevant links"},{"location":"section1/docker/docker-page/","text":"Docker I downloaded Docker and had my first container up and running by following the Docker beginner tutorial. I then built a webapp with docker and had to alter the Flask app with updated gifs and variable names. (insert image). Iniitally it wasn't workring - I got an error for building the container using a Dockerfile that I created. No immediate solution on the git repo README so looked online. I Ran docker run --platform linux/x86_64 Set buildkit to false in the docker settings. These fixed the issue I was having. The last thing to do was to deploy an app to a Swarm. This was going well up until the deployment part. The online services were not working but after using a different tutorial, I was able to get a working image that was deployable to swarm. The next docker project involved mkdocs .","title":"Learning Docker"},{"location":"section1/docker/docker-page/#docker","text":"I downloaded Docker and had my first container up and running by following the Docker beginner tutorial. I then built a webapp with docker and had to alter the Flask app with updated gifs and variable names. (insert image). Iniitally it wasn't workring - I got an error for building the container using a Dockerfile that I created. No immediate solution on the git repo README so looked online. I Ran docker run --platform linux/x86_64 Set buildkit to false in the docker settings. These fixed the issue I was having. The last thing to do was to deploy an app to a Swarm. This was going well up until the deployment part. The online services were not working but after using a different tutorial, I was able to get a working image that was deployable to swarm. The next docker project involved mkdocs .","title":"Docker"},{"location":"section1/docker/hadolint-page/","text":"Hadolint Hadolint is a package that can be used to lint the docker file called Dockerfile. I attempted to use this to lint my mkdocs Dockerfile.","title":"Hadolint"},{"location":"section1/docker/hadolint-page/#hadolint","text":"Hadolint is a package that can be used to lint the docker file called Dockerfile. I attempted to use this to lint my mkdocs Dockerfile.","title":"Hadolint"},{"location":"section1/docker/mkdocs-page/","text":"mkdocs Using docker I deployed an mkdocs app. mkdocs is __ I then stored this into github into my github.io git pages repo. After some long research and trial and error, I was finally able to give my git pages the theme 'readthedocs' - this was the theme that the mkdocs had when it was deployed on my local machine. Here is what it looked like before (screens). And here is what it looks like now (screens). It looks more like documentation pages which is the intention. I will be using mkdocs on git pages to document my progress on several technologies that I'm learning and trying out.","title":"Mkdocs"},{"location":"section1/docker/mkdocs-page/#mkdocs","text":"Using docker I deployed an mkdocs app. mkdocs is __ I then stored this into github into my github.io git pages repo. After some long research and trial and error, I was finally able to give my git pages the theme 'readthedocs' - this was the theme that the mkdocs had when it was deployed on my local machine. Here is what it looked like before (screens). And here is what it looks like now (screens). It looks more like documentation pages which is the intention. I will be using mkdocs on git pages to document my progress on several technologies that I'm learning and trying out.","title":"mkdocs"},{"location":"section1/git/git-page/","text":"Github Project 1 of the Grad program is to learn Git. I Created a github account. The github profile can be visited at gitsugatensho I secured my account by adding 2 factor authentification. To connect to git via the terminal I had to set up SSH keys and link them to my Github account. This allowed for remote access to my account from my local terminal. I also set up GPG keys and linked my Github account accordingly. (insert some screens) Next I made my first repo. I added an empty .txt file and then using the terminal, I cloned the repo into a folder on my local machine. I created a new branch (insert screens) and edited the empty text file to say \"I hope this goes to the split branch\". I pushed this file into the branch, and upon inspection it was there, in the new branch. I wanted to create a pull request to merch this new branch into the main/master branch. After running the right commands, I had successfully merged the new branch into the main branch. (insert screeens) I learnt about protection of master branches - for best practice, no one should alter the main branch, and merge requests from other branches need to be verified before merging. I then forked a project I found on github. It was a repo full of many different python projects. I decided to commit a change to a project called 'music player' . I forked the repo, and then changed a python file to have the title of the music file that was playing to be aligned in the center of the gui instead of aligned left. I pushed this code back up to github into my forked repo. I then took some time to understand what git diff, git status, and git log do. I also learnt what a .gitignore file was and made one to ignore a whole folder. I created several README.md files for some other repos I had created. I studied git conflicts and learnt how they can be a problem in larger teams.","title":"Github"},{"location":"section1/git/git-page/#github","text":"Project 1 of the Grad program is to learn Git. I Created a github account. The github profile can be visited at gitsugatensho I secured my account by adding 2 factor authentification. To connect to git via the terminal I had to set up SSH keys and link them to my Github account. This allowed for remote access to my account from my local terminal. I also set up GPG keys and linked my Github account accordingly. (insert some screens) Next I made my first repo. I added an empty .txt file and then using the terminal, I cloned the repo into a folder on my local machine. I created a new branch (insert screens) and edited the empty text file to say \"I hope this goes to the split branch\". I pushed this file into the branch, and upon inspection it was there, in the new branch. I wanted to create a pull request to merch this new branch into the main/master branch. After running the right commands, I had successfully merged the new branch into the main branch. (insert screeens) I learnt about protection of master branches - for best practice, no one should alter the main branch, and merge requests from other branches need to be verified before merging. I then forked a project I found on github. It was a repo full of many different python projects. I decided to commit a change to a project called 'music player' . I forked the repo, and then changed a python file to have the title of the music file that was playing to be aligned in the center of the gui instead of aligned left. I pushed this code back up to github into my forked repo. I then took some time to understand what git diff, git status, and git log do. I also learnt what a .gitignore file was and made one to ignore a whole folder. I created several README.md files for some other repos I had created. I studied git conflicts and learnt how they can be a problem in larger teams.","title":"Github"},{"location":"section1/git/music-player/","text":"Music Player I forked this repo . This repo has many small projects for learners explore the contents. I looked around and saw the a tkinter music player folder. From the screenshots I saw something that I could edit - the alignment of the title of the audio file currently playing. Initially it was aligned left and I wanted to align it in the center. I cloned the repo after forking it and opened up Visual Studio Code and began reading through the music-player.py file. I searched through all of the tk.label 's until I found one called music-label . I saw that it had no anchor tag (which is responsible for text alignment), so i added one - anchor=\"center\" . I ran the python file on my Linux VM and the alignment of the label changed as expected. Content with my work, I committed my changes to github. My next steps are to create a branch and then send a pull request to the master branch of the original repo. This change is quite small so I'm not sure what to expect.","title":"music player"},{"location":"section1/git/music-player/#music-player","text":"I forked this repo . This repo has many small projects for learners explore the contents. I looked around and saw the a tkinter music player folder. From the screenshots I saw something that I could edit - the alignment of the title of the audio file currently playing. Initially it was aligned left and I wanted to align it in the center. I cloned the repo after forking it and opened up Visual Studio Code and began reading through the music-player.py file. I searched through all of the tk.label 's until I found one called music-label . I saw that it had no anchor tag (which is responsible for text alignment), so i added one - anchor=\"center\" . I ran the python file on my Linux VM and the alignment of the label changed as expected. Content with my work, I committed my changes to github. My next steps are to create a branch and then send a pull request to the master branch of the original repo. This change is quite small so I'm not sure what to expect.","title":"Music Player"},{"location":"section1/linux/linux-page/","text":"Linux","title":"Linux"},{"location":"section1/linux/linux-page/#linux","text":"","title":"Linux"},{"location":"section1/utm/utm-page/","text":"Welcome to the UTM page The full UTM documentation can be found on getutm.app . Features Unlike other free virtualisation software, UTM was created for macOS and only for Apple platforms. Run ARM64 operating systems such as Windows\u00ae for ARM and Ubuntu\u00ae ARM on your Apple Silicon Mac fully virtualised at near native speeds Attach USB devices to your virtual machine Run and store VMs from external drives","title":"UTM"},{"location":"section1/utm/utm-page/#welcome-to-the-utm-page","text":"The full UTM documentation can be found on getutm.app .","title":"Welcome to the UTM page"},{"location":"section1/utm/utm-page/#features","text":"Unlike other free virtualisation software, UTM was created for macOS and only for Apple platforms. Run ARM64 operating systems such as Windows\u00ae for ARM and Ubuntu\u00ae ARM on your Apple Silicon Mac fully virtualised at near native speeds Attach USB devices to your virtual machine Run and store VMs from external drives","title":"Features"},{"location":"section2/AWS%20wip/","text":"Section 2: Part 1: (AWS EC2) Previously Created AWS account Setup 2FA Setup IAM roles Followed an introductory course and was briefly informed about all of the AWS technologies. Project 4 Hosting a Docker app on an EC2 instance on AWS. The first step was to create an EC2 instance and connect to it via SSH. Used Amazon Linux 2 as the image and used the free tier AMI t2.nano. I generated a key pair called \"project4key\" and downlaoded the relevant .pem onto my local device. Created a security group and set inbound and outbound traffic rules. Inbound rules - port 80 is where the docker image will be hosted, port 443 to allow traffic via HTTPs, and port 20 allows for me to connect to the linux image via SSH Outbound rules - there is no resriction on which ports and IPs can connect to this instance I used the command ssh -i \"project4key.pem\" ec2-user@ec2-13-40-235-185.eu-west-2.compute.amazonaws.com to connect to the linux image via SSH. The next step was to install dependencies. I used sudo su to access root user privileges and installed git and docker. I pulled my repo gifsite . This repo contains a Dockerfile, and a flask app that displays a random gif upon visiting the site. The gif site! (ignore that it says 'cat fif' and shows a gif of Timmy the sheep I built the docker image within my repo and ran it. The docker app was being hosted on port 80. Launch Templates and Auto Scaling Groups Create a launch template Having trouble with this Didn\u2019t do it correctly. Create auto scaling group What\u2019s a use case for this in a work project? How can I schedule stop/start with time of the day? Understand horizontal and vertical scaling Understood. Relevant links Home | About | License | Docs","title":"Section 2: Part 1: (AWS EC2)"},{"location":"section2/AWS%20wip/#section-2-part-1-aws-ec2","text":"","title":"Section 2: Part 1: (AWS EC2)"},{"location":"section2/AWS%20wip/#previously","text":"Created AWS account Setup 2FA Setup IAM roles Followed an introductory course and was briefly informed about all of the AWS technologies.","title":"Previously"},{"location":"section2/AWS%20wip/#project-4","text":"","title":"Project 4"},{"location":"section2/AWS%20wip/#hosting-a-docker-app-on-an-ec2-instance-on-aws","text":"The first step was to create an EC2 instance and connect to it via SSH. Used Amazon Linux 2 as the image and used the free tier AMI t2.nano. I generated a key pair called \"project4key\" and downlaoded the relevant .pem onto my local device. Created a security group and set inbound and outbound traffic rules. Inbound rules - port 80 is where the docker image will be hosted, port 443 to allow traffic via HTTPs, and port 20 allows for me to connect to the linux image via SSH Outbound rules - there is no resriction on which ports and IPs can connect to this instance I used the command ssh -i \"project4key.pem\" ec2-user@ec2-13-40-235-185.eu-west-2.compute.amazonaws.com to connect to the linux image via SSH. The next step was to install dependencies. I used sudo su to access root user privileges and installed git and docker. I pulled my repo gifsite . This repo contains a Dockerfile, and a flask app that displays a random gif upon visiting the site. The gif site! (ignore that it says 'cat fif' and shows a gif of Timmy the sheep I built the docker image within my repo and ran it. The docker app was being hosted on port 80.","title":"Hosting a Docker app on an EC2 instance on AWS."},{"location":"section2/AWS%20wip/#launch-templates-and-auto-scaling-groups","text":"Create a launch template Having trouble with this Didn\u2019t do it correctly. Create auto scaling group What\u2019s a use case for this in a work project? How can I schedule stop/start with time of the day? Understand horizontal and vertical scaling Understood.","title":"Launch Templates and Auto Scaling Groups"},{"location":"section2/AWS%20wip/#relevant-links","text":"Home | About | License | Docs","title":"Relevant links"},{"location":"section2/AWS/","text":"Section 2: Part 1: (AWS EC2) Previously Created AWS account Setup 2FA Setup IAM roles Followed an introductory course and was briefly informed about all of the AWS technologies. Project 4 Hosting a Docker app on an EC2 instance on AWS. The first step was to create an EC2 instance and connect to it via SSH. Used Amazon Linux 2 as the image and used the free tier AMI t2.nano. I generated a key pair called \"project4key\" and downloaded the relevant .pem onto my local device. Created a security group and set inbound and outbound traffic rules. Inbound rules - port 80 is where the docker image will be hosted, port 443 to allow traffic via HTTPs, and port 22 allows for me to connect to the linux image via SSH Outbound rules - there is no restriction on which ports and IPs traffic can leave out to I used the command ssh -i \"project4key.pem\" ec2-user@ec2-13-40-235-185.eu-west-2.compute.amazonaws.com to connect to the linux image via SSH. The next step was to install dependencies. I used sudo su to access root user privileges and installed git and docker. I pulled my repo gifsite . This repo contains a Dockerfile, and a flask app that displays a random gif upon visiting the site. The gif site! (ignore that it says 'cat fif' and shows a gif of a sheep I built the docker image within my repo and ran it. The docker app was being hosted on port 80. Relevant links Home | About | License | Docs","title":"Project 4"},{"location":"section2/AWS/#section-2-part-1-aws-ec2","text":"","title":"Section 2: Part 1: (AWS EC2)"},{"location":"section2/AWS/#previously","text":"Created AWS account Setup 2FA Setup IAM roles Followed an introductory course and was briefly informed about all of the AWS technologies.","title":"Previously"},{"location":"section2/AWS/#project-4","text":"","title":"Project 4"},{"location":"section2/AWS/#hosting-a-docker-app-on-an-ec2-instance-on-aws","text":"The first step was to create an EC2 instance and connect to it via SSH. Used Amazon Linux 2 as the image and used the free tier AMI t2.nano. I generated a key pair called \"project4key\" and downloaded the relevant .pem onto my local device. Created a security group and set inbound and outbound traffic rules. Inbound rules - port 80 is where the docker image will be hosted, port 443 to allow traffic via HTTPs, and port 22 allows for me to connect to the linux image via SSH Outbound rules - there is no restriction on which ports and IPs traffic can leave out to I used the command ssh -i \"project4key.pem\" ec2-user@ec2-13-40-235-185.eu-west-2.compute.amazonaws.com to connect to the linux image via SSH. The next step was to install dependencies. I used sudo su to access root user privileges and installed git and docker. I pulled my repo gifsite . This repo contains a Dockerfile, and a flask app that displays a random gif upon visiting the site. The gif site! (ignore that it says 'cat fif' and shows a gif of a sheep I built the docker image within my repo and ran it. The docker app was being hosted on port 80.","title":"Hosting a Docker app on an EC2 instance on AWS."},{"location":"section2/AWS/#relevant-links","text":"Home | About | License | Docs","title":"Relevant links"},{"location":"section2/AWS2/","text":"# Section 2: Part 2: [AWS] Wordpress on ECS Objectives Project 6 required me to: - Set up Wordpress in EC2 - Have an RDS database connected to wordpress - Push the Wordpress container to ECR Getting Started Project 5 took 1 day, but Project 6 took 2 weeks. EC2 Developed tbe wordpress container until it was working on a single EC2 instance. - Install docker and git on an EC2 instance - yum install docker - yum install git - Clone my wordpress repo from Github - git clone my Wordpress on AWS repo - edit credentials in docker-compose.yml file. - run docker-compose up -d - Edit the docker-compose.yml file until it was fully working RDS Set up an RDS database and linked it to the single EC2 instance to check if it was working. ELB options Elb was in a previous version of project 6 but was ommitted in a new version as it was not in the requirements for project 6. EFS issue EFS integration was not successful in the earlier version and since it was not in the requirements either, it was omitted. Port and Environmental Variable issues Port values and Environmental values were not set correctly on multiple occasions, so extra care was taken to ensure that the right values were being enterred in data fields across the AWS interface. Pushing the container to ECR Set AWS credentials Login to AWS console aws ecr get-login-password --region eu-west-2 | docker login --username AWS --password-stdin ************.dkr.ecr.eu-west-2.amazonaws.com Push image to ECR repository ```bat docker tag wordpressimage:latest * * .dkr.ecr.eu-west-2.amazonaws.com/wordpressblog:latest console docker push * * .dkr.ecr.eu-west-2.amazonaws.com/wordpressblog:latest ``` next Created a task definition that used the image from ECR repository wordpressblog The ports were mapped to port 80. Environmental variables were set: Wordpress_config_extra is for any extra constants DB host points to the RDS database And the rest are the credentials for the wordpress database. Points of failure: EFS mounting issue Container port not specified Wrong container port No environmental variables specified Wrong environmental variables RDS password different to what it was supposed to be Security groups with missing rules ## Relevant links Home | About | License | Docs","title":"Project 5"},{"location":"section2/AWS2/#objectives","text":"Project 6 required me to: - Set up Wordpress in EC2 - Have an RDS database connected to wordpress - Push the Wordpress container to ECR","title":"Objectives"},{"location":"section2/AWS2/#getting-started","text":"Project 5 took 1 day, but Project 6 took 2 weeks.","title":"Getting Started"},{"location":"section2/AWS2/#ec2","text":"Developed tbe wordpress container until it was working on a single EC2 instance. - Install docker and git on an EC2 instance - yum install docker - yum install git - Clone my wordpress repo from Github - git clone my Wordpress on AWS repo - edit credentials in docker-compose.yml file. - run docker-compose up -d - Edit the docker-compose.yml file until it was fully working","title":"EC2"},{"location":"section2/AWS2/#rds","text":"Set up an RDS database and linked it to the single EC2 instance to check if it was working.","title":"RDS"},{"location":"section2/AWS2/#elb-options","text":"Elb was in a previous version of project 6 but was ommitted in a new version as it was not in the requirements for project 6.","title":"ELB options"},{"location":"section2/AWS2/#efs-issue","text":"EFS integration was not successful in the earlier version and since it was not in the requirements either, it was omitted.","title":"EFS issue"},{"location":"section2/AWS2/#port-and-environmental-variable-issues","text":"Port values and Environmental values were not set correctly on multiple occasions, so extra care was taken to ensure that the right values were being enterred in data fields across the AWS interface.","title":"Port and Environmental Variable issues"},{"location":"section2/AWS2/#pushing-the-container-to-ecr","text":"Set AWS credentials Login to AWS console aws ecr get-login-password --region eu-west-2 | docker login --username AWS --password-stdin ************.dkr.ecr.eu-west-2.amazonaws.com Push image to ECR repository ```bat docker tag wordpressimage:latest * * .dkr.ecr.eu-west-2.amazonaws.com/wordpressblog:latest console docker push * * .dkr.ecr.eu-west-2.amazonaws.com/wordpressblog:latest ```","title":"Pushing the container to ECR"},{"location":"section2/AWS2/#next","text":"Created a task definition that used the image from ECR repository wordpressblog The ports were mapped to port 80. Environmental variables were set: Wordpress_config_extra is for any extra constants DB host points to the RDS database And the rest are the credentials for the wordpress database.","title":"next"},{"location":"section2/AWS2/#points-of-failure","text":"EFS mounting issue Container port not specified Wrong container port No environmental variables specified Wrong environmental variables RDS password different to what it was supposed to be Security groups with missing rules ## Relevant links Home | About | License | Docs","title":"Points of failure:"},{"location":"section2/AWS3/","text":"# Section 2: Part 3: (Title) Welcome to part 3 of section 2. Project 7 :) Setting up a VPC, subnets, Internet gateways, and route tables meticulously. ## Relevant links Home | About | License | Docs","title":"Project 6"},{"location":"section3/tf/","text":"Learning Terraform. J & F have different teaching styles and approach to programming. Day 1: Intro to Terraform What is terraform? How to link tf to aws? how to create resources in aws? how to delete resources? Day 2: S3 bucket manipulation in Terraform Instructions given [x]enable versioning [x]upload a file - check it [x]upload a modified version of that file - check that. [ ]revert to an earlier version of the file - check it [ ]upload a 3rd version of the file and check it [ ]you know you can't delete buckets with files inside - delete the file then destroy the bucket [ ]what happens? [ ]how do you fix it? do it [ ]now get rid the bucket","title":"Tf"},{"location":"section3/tf/#learning-terraform","text":"J & F have different teaching styles and approach to programming.","title":"Learning Terraform."},{"location":"section3/tf/#day-1-intro-to-terraform","text":"What is terraform? How to link tf to aws? how to create resources in aws? how to delete resources?","title":"Day 1: Intro to Terraform"},{"location":"section3/tf/#day-2-s3-bucket-manipulation-in-terraform","text":"","title":"Day 2: S3 bucket manipulation in Terraform"},{"location":"section3/tf/#instructions-given","text":"[x]enable versioning [x]upload a file - check it [x]upload a modified version of that file - check that. [ ]revert to an earlier version of the file - check it [ ]upload a 3rd version of the file and check it [ ]you know you can't delete buckets with files inside - delete the file then destroy the bucket [ ]what happens? [ ]how do you fix it? do it [ ]now get rid the bucket","title":"Instructions given"}]}